<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dengbowang.github.io/</id>
    <title>dengbowang</title>
    <updated>2022-11-12T10:04:04.132Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dengbowang.github.io/"/>
    <link rel="self" href="https://dengbowang.github.io/atom.xml"/>
    <subtitle>以自然之眼观物，以自然之舌言情。</subtitle>
    <logo>https://dengbowang.github.io/images/avatar.png</logo>
    <icon>https://dengbowang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, dengbowang</rights>
    <entry>
        <title type="html"><![CDATA[html]]></title>
        <id>https://dengbowang.github.io/post/html/</id>
        <link href="https://dengbowang.github.io/post/html/">
        </link>
        <updated>2022-11-12T10:02:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="插入图片">插入图片</h1>
<h2 id="方法一">方法一</h2>
<pre><code class="language-markdown">![  图片名/任意   ](   链接地址  )
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://picd.zhimg.com/80/v2-ab55e2fc1fafd7b87c36ef40e9a61dc0_1440w.webp?source=d16d100b" alt="图片展示" loading="lazy"></figure>
<h2 id="方法二">方法二</h2>
<pre><code class="language-html">&lt;img src=&quot;超链接&quot; &gt;
</code></pre>
<img src="https://pica.zhimg.com/80/v2-6f7460c4bddac30226f1c085ae39bab3_1440w.webp?source=d16d100b">
<h1 id="插入音乐">插入音乐</h1>
<h2 id="方法一-2">方法一</h2>
<h3 id="网易云播放器内嵌">网易云播放器内嵌</h3>
<pre><code class="language-html">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=475479888&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</code></pre>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=475479888&auto=1&height=66"></iframe>
<p><a href="https://music.163.com/#/outchain/2/554241732/">网易云音乐 (163.com)</a>进入了解代码</p>
<h1 id="插入视频">插入视频</h1>
<h2 id="方法一-3">方法一</h2>
<p>哔哩哔哩视频内嵌</p>
<pre><code class="language-html">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=944583285&amp;bvid=BV1UW4y1j7Gg&amp;cid=875050848&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;
</code></pre>
<iframe src="//player.bilibili.com/player.html?aid=944583285&bvid=BV1UW4y1j7Gg&cid=875050848&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<figure data-type="image" tabindex="2"><img src="https://i0.hdslb.com/bfs/article/e15e4b60ad0da3572dffdc513502f26dec6858f5.png@809w_446h_progressive.webp" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vido]]></title>
        <id>https://dengbowang.github.io/post/vido/</id>
        <link href="https://dengbowang.github.io/post/vido/">
        </link>
        <updated>2022-11-06T14:54:27.000Z</updated>
        <content type="html"><![CDATA[<iframe src="https://player.bilibili.com/player.html?aid=251643277&bvid=BV1av411M7XG&cid=441250782&page=0"> </iframe>
<p>稍微解释一下上面代码的含义：</p>
<p>page -&gt; 起始下标为 1 (默认值也是为1)</p>
<p>as_wide -&gt; 是否宽屏 【1: 宽屏, 0: 小屏】</p>
<p>high_quality -&gt; 是否高清 【1: 高清(最高1080p) / 0: 最低视频质量(默认)】</p>
<p>danmaku -&gt; 是否开启弹幕 【1: 开启(默认), 0: 关闭】</p>
<p>allowfullscreen -&gt; allowfullscreen= &quot;ture&quot; 允许全屏，使用该参数可以在浏览器中全屏播放</p>
<iframe src="//player.bilibili.com/player.html?aid=251643277&bvid=BV1av411M7XG&cid=441250782&page=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="600" height="2000"> </iframe> 
<p>1234567890</p>
<iframe src="//player.bilibili.com/player.html?aid=603907357&bvid=BV1kB4y1j7xr&cid=857133726&page=1"as_wide="1"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<p>22222222222222222222222222222222222222222222222</p>
<iframe src="//player.bilibili.com/player.html?aid=603907357&bvid=BV1kB4y1j7xr&cid=857133726&page=6"as_wide="1"  danmaku="0" scrolling="no" border="1" frameborder="no" framespacing="1" allowfullscreen="true"> </iframe>
<iframe src="//player.bilibili.com/player.html?aid=251643277&bvid=BV1av411M7XG&cid=441250782&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="100%"> </iframe> 
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[测试]]></title>
        <id>https://dengbowang.github.io/post/ce-shi/</id>
        <link href="https://dengbowang.github.io/post/ce-shi/">
        </link>
        <updated>2022-11-06T14:03:33.000Z</updated>
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=944583285&bvid=BV1UW4y1j7Gg&cid=875050848&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<p>稍微解释一下上面代码的含义：</p>
<p>page -&gt; 起始下标为 1 (默认值也是为1)</p>
<p>as_wide -&gt; 是否宽屏 【1: 宽屏, 0: 小屏】</p>
<p>high_quality -&gt; 是否高清 【1: 高清(最高1080p) / 0: 最低视频质量(默认)】</p>
<p>danmaku -&gt; 是否开启弹幕 【1: 开启(默认), 0: 关闭】</p>
<p>allowfullscreen -&gt; allowfullscreen= &quot;ture&quot; 允许全屏，使用该参数可以在浏览器中全屏播放</p>
<pre><code class="language-c">BILIBILI 地址PC端参数    

&amp;high_quality=1   (1=最高画质 0=最低画质)  

&amp;danmaku=0   (1=打开弹幕 0=关闭弹幕) 

iframe 参数    
allowfullscreen=&quot;allowfullscreen&quot; #移动端全屏    
sandbox=&quot;allow-top-navigation allow-same-origin allow-forms allow-scripts&quot; #禁止弹出网页
</code></pre>
<iframe src="//player.bilibili.com/player.html?aid=251643277&bvid=BV1av411M7XG&cid=441250782&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<p>语雀</p>
<figure data-type="image" tabindex="1"><img src="https://www.yuque.com/api/filetransfer/images?url=http%3A%2F%2Fremote.img.zhubian.com%2Fmmbiz.qlogo.cn%2Fmmbiz_png%2FGhiafELVODOwpSsibDxyEEfPA9BgqPHJHPZ8k7V5Rk8eMApRrE1icCBgib6fwsRQyibaiaTdWNHSUj5YnsoBou85NnDA%2F640%3Fwx_fmt%3Dpng&amp;sign=42bf547acb32ec0eb8127248c9188fbba0345be7c46a8addaa7d657ac07798a7&amp;x-oss-process=image%2Fresize%2Cw_1080%2Climit_0" alt="img" loading="lazy"></figure>
<p>主编</p>
<figure data-type="image" tabindex="2"><img src="http://remote.img.zhubian.com/mmbiz.qlogo.cn/mmbiz_png/GhiafELVODOwpSsibDxyEEfPA9BgqPHJHPnM2ibIibH7TAf3D3mZsicARicellj11UqqOqEoSNaNpjgs0t6RcibzhD27A/640?wx_fmt=png" alt="img" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="http://remote.img.zhubian.com/mmbiz.qlogo.cn/mmbiz_png/GhiafELVODOwpSsibDxyEEfPA9BgqPHJHP7ibOiaFAz0TtLiauAX6qWsV4fe9R7WbFzPuBfxcIMD1bHwsOTI0tUNyrA/640?wx_fmt=png" alt="img" loading="lazy"></figure>
<p>96</p>
<figure data-type="image" tabindex="4"><img src="http://newcdn.96weixin.com/mmbiz.qlogo.cn/mmbiz_gif/GhiafELVODOxWXVDUKBxYWkbBHNnMPfGiaDHWnCd9IvPXIZ7r2VgPFibU9EsJYkhicia1GZ2te3fL1SGH9B4eBDbOAQ/640?wx_fmt=gif" alt="img" loading="lazy"></figure>
<p><img src="http://newcdn.96weixin.com/mmbiz.qlogo.cn/mmbiz_jpg/GhiafELVODOxWXVDUKBxYWkbBHNnMPfGiayx5jG6LibaRsyAX9fL6t8S5ib890poiaTEkicibI1VU58RibICGcGBp9hiaOQ/640?wx_fmt=jpeg" alt="img" loading="lazy"><br>
语雀<br>
<img src="https://cdn.nlark.com/yuque/0/2022/png/33633315/1666696279709-d16405f8-f34e-4b8b-b0b1-6c355c014042.png" alt="img" loading="lazy"></p>
<figure data-type="image" tabindex="5"><img src="https://cdn.nlark.com/yuque/0/2022/png/33633315/1666696279669-b92ed793-b3ee-46f0-b1e8-abf374c82d90.png" alt="img" loading="lazy"></figure>
<h1 id="知乎">知乎</h1>
<figure data-type="image" tabindex="6"><img src="https://pic1.zhimg.com/80/v2-a34b6a8670473d2b1f56aaec89092ee8_1440w.webp" alt="img" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://pic2.zhimg.com/80/v2-04c7a7f23825186ac4e35a49f9c4bde5_1440w.webp" alt="img" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://pic4.zhimg.com/80/v2-1eb9235e78d147e8f7f992c8ca38331b_1440w.webp" alt="img" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[about]]></title>
        <id>https://dengbowang.github.io/post/about/</id>
        <link href="https://dengbowang.github.io/post/about/">
        </link>
        <updated>2022-11-06T12:55:35.000Z</updated>
        <content type="html"><![CDATA[<p>123213</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[github上传]]></title>
        <id>https://dengbowang.github.io/post/github-shang-chuan/</id>
        <link href="https://dengbowang.github.io/post/github-shang-chuan/">
        </link>
        <updated>2022-11-06T12:48:22.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>layout:       post<br>
title:        &quot;github仓库上传&quot;<br>
author:       &quot;dengbowang&quot;<br>
header-style: text<br>
catalog:      true<br>
tags:<br>
- blog<br>
- github</p>
<hr>
<p>[TOC]</p>
<h1 id="官方上传参考">😒官方上传参考</h1>
<p>…or create a new repository on the command line</p>
<pre><code class="language-visual">echo &quot;# text&quot; &gt;&gt; README.md
git init
git add README.md
git commit -m &quot;first commit&quot;
git branch -M main
git remote add origin git@github.com:dengbowang/text.git
git push -u origin main
</code></pre>
<p>😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊😊</p>
<p>…or push an existing repository from the command line</p>
<pre><code>git remote add origin git@github.com:dengbowang/text.git
git branch -M main
git push -u origin main
</code></pre>
<h3 id="git远程覆盖本地">git远程覆盖本地。。</h3>
<p>master 标红是远程分支名 记得替换下 一般都是在dev 或者版本号上开发</p>
<p>git 强制覆盖本地/远程仓库</p>
<p>强制覆盖远程仓库 :</p>
<pre><code class="language-c++">`git push -f origin master`
</code></pre>
<p>强制覆盖本地仓库(假设你的分支是master):</p>
<pre><code class="language-xml">git gc

git reset

git reset --hard master
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[github替换]]></title>
        <id>https://dengbowang.github.io/post/github-ti-huan/</id>
        <link href="https://dengbowang.github.io/post/github-ti-huan/">
        </link>
        <updated>2022-11-06T12:47:57.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>layout:       post<br>
title:        &quot;github仓库替换&quot;<br>
author:       &quot;dengbowang&quot;<br>
header-style: text<br>
catalog:      true<br>
tags:<br>
- github<br>
- blog</p>
<hr>
<p>[TOC]</p>
<h1 id="git-pull-origin-master">git pull origin master</h1>
<p>同步远程仓库</p>
<h1 id="用本地文件替换远程仓库文件">🐱‍🐉用本地文件替换远程仓库文件</h1>
<h2 id="ls">ls</h2>
<pre><code>dbw@dengbowang MINGW64 /e/Users/Administrator/Desktop/blog/Blog (master)
**$ ls**
404.html  Gruntfile.js  Rakefile     _includes/  about.html    css/            fonts/      js/           package-lock.json  search.json
CNAME     LICENSE       _config.yml  _layouts/   ads.txt       dengbowang.png  img/        less/         package.json       sw.js
Gemfile   README.md     _doc/        _posts/     archive.html  feed.xml        index.html  offline.html  pwa/

dbw@dengbowang MINGW64 /e/Users/Administrator/Desktop/blog/Blog (master)
</code></pre>
<h2 id="git-status">git status</h2>
<pre><code>$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        deleted:    _posts/2014-01-29-hello-2015.markdown

        deleted:    _posts/read_sf_plf/2019-03-17-sf-plf-17-use-tactics.md
        deleted:    _posts/read_sf_plf/2019-03-18-sf-plf-18-use-auto.md
        deleted:    _posts/read_sf_plf/2019-03-19-sf-plf-19-partial-eval.md
        deleted:    _posts/read_sf_qc/2019-09-02-sf-qc-02-typeclasses.md

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        _posts/11/

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<h2 id="git-add-all">git add --all</h2>
<pre><code>dbw@dengbowang MINGW64 /e/Users/Administrator/Desktop/blog/Blog (master)
$ git add --all
</code></pre>
<h2 id="git-commit-m-11-5">git commit -m &quot;11-5&quot;</h2>
<pre><code>dbw@dengbowang MINGW64 /e/Users/Administrator/Desktop/blog/Blog (master)
$ git commit -m &quot;11-5&quot;
[master edb62d6] 11-5
 86 files changed, 109 insertions(+), 15478 deletions(-)
 create mode 100644 _posts/11/2022-11-5.md
 delete mode 100644 _posts/2014-01-29-hello-2015.markdown
 delete mode 100644 _posts/read_sf_plf/2019-03-18-sf-plf-18-use-auto.md
 delete mode 100644 _posts/read_sf_plf/2019-03-19-sf-plf-19-partial-eval.md
 delete mode 100644 _posts/read_sf_qc/2019-09-02-sf-qc-02-typeclasses.md
</code></pre>
<h2 id="git-push-origin-master">git push origin master</h2>
<pre><code>dbw@dengbowang MINGW64 /e/Users/Administrator/Desktop/blog/Blog (master)
$ git push origin master
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 12 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (5/5), 1.75 KiB | 1.75 MiB/s, done.
Total 5 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/dengbowang/Blog.git
   75fb912..edb62d6  master -&gt; master
</code></pre>
<p>dbw@dengbowang MINGW64 /e/Users/Administrator/Desktop/blog/Blog (master)<br>
$</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[c2]]></title>
        <id>https://dengbowang.github.io/post/c2/</id>
        <link href="https://dengbowang.github.io/post/c2/">
        </link>
        <updated>2022-11-06T12:47:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="c语言高级特性">C语言高级特性</h1>
<p>前面我们了解了C语言的相关基础内容，我们来看看C语言的高级部分。这一章的学习难道会比较大，尤其是指针板块，因为需要理解计算机内存模型，所以说是很多初学者的噩梦。</p>
<h2 id="函数">函数</h2>
<p>其实函数我们在一开始就在使用了：</p>
<pre><code class="language-c">int main() {   //这是定义函数
   ...
}
</code></pre>
<p>我们程序的入口点就是<code>main</code>函数，我们只需要将我们的程序代码编写到主函数中就可以运行了，不够这个函数只是由我们来定义，而不是我们自己来调用。当然，除了主函数之外，我们一直在使用的<code>printf</code>也是一个函数，不过这个函数是标准库中已经实现好了的，现在是我们在调用这个函数：</p>
<pre><code class="language-c">printf(&quot;Hello World!&quot;);    //直接通过 函数名称(参数...) 的形式调用函数
</code></pre>
<p>那么，函数的具体定义是什么呢？</p>
<blockquote>
<p>函数是完成特定任务的独立程序代码单元。</p>
</blockquote>
<p>其实简单来说，函数时为了完成某件任务而生的，可能我们要完成某个任务并不是一行代码就可以搞定的，但是现在可能会遇到这种情况：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main() {
    int a = 10;
    
    printf(&quot;H&quot;);   //比如下面这三行代码就是我们要做的任务
    printf(&quot;A&quot;);
    a += 10;
    
    if(a &gt; 20) {
        printf(&quot;H&quot;);   //这里我们还需要执行这个任务
        printf(&quot;A&quot;);
        a += 10;
    }

    switch (a) {
        case 30:
            printf(&quot;H&quot;);   //这里又要执行这个任务
            printf(&quot;A&quot;);
            a += 10;
            
    }
}
</code></pre>
<p>我们每次要做这个任务时，都要完完整整地将任务的每一行代码都写下来，如果我们的程序中多处都需要执行这个任务，每个地方都完整地写一遍，实在是太臃肿了，有没有一种更好的办法能优化我们的代码呢？</p>
<p>这时我们就可以考虑使用函数了，我们可以将我们的程序逻辑代码全部编写到函数中，当我们执行函数时，实际上执行的就是函数中的全部内容，也就是按照我们制定的规则执行对应的任务，每次需要做这个任务时，只需要调用函数即可。</p>
<p>我们来看看，如何创建和使用函数。</p>
<h3 id="创建和使用函数">创建和使用函数</h3>
<p>首先我们来看看如何创建一个函数，其实创建一个函数是很简单的，格式如下：</p>
<pre><code class="language-c">返回值类型 函数名称([函数参数...]);
</code></pre>
<p>其中函数名称也是有要求的，并不是所有的字符都可以用作函数名称，它的命名规则与变量的命名规则基本一致，所以这里就不一一列出了。</p>
<p>函数不仅仅需要完成我们的任务，可能某些函数还需要告诉我们结果，比如我们之前认识的<code>getchar</code>函数，这个函数实际上返回了一个int值作为结果（也就是我们输入的字符）我们同样可以将函数返回的结果赋值给变量或是参与运算等等。</p>
<p>当然如果我们的函数只需要完成任务，不需要告诉我们结果，返回值类型可以写成<code>void</code>表示为空。</p>
<p>函数参数我们放在下一个小节中讲解，所以这里我们不使用任何参数，所以这里也将参数设定为<code>void</code>表示没有参数（当然为了方便，我们也可以直接什么都不写）</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void test(void);   //定义函数原型，因为C语言是从上往下的，所以如果要在下面的主函数中使用这个函数，一定要定义到它的上面。

int main() {
    
}

void test(void){   //函数具体定义，添加一个花括号并在其中编写程序代码，就和我们之前在main中编写一样
    printf(&quot;我是测试函数!&quot;);
}
</code></pre>
<p>或是直接在上方写上函数的具体定义：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void test(void){   //函数具体定义，添加一个花括号并在其中编写程序代码，就和我们之前在main中编写一样
    printf(&quot;我是测试函数!&quot;);
}

int main() {
    
}
</code></pre>
<p>那么现在我们将函数定义好之后，该如何去使用呢？</p>
<pre><code class="language-c">int main() {
    test();   //这里我们只需要使用 函数名称(); 就可以调用函数了
  	printf(&quot;Hello World!&quot;);   //实际上printf也是一个函数，功能是向控制台打印字符串，只不过这个函数是系统提供的，已经提前实现好了，其中的参数我们后续还会进行介绍。
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://s2.loli.net/2022/06/19/s1uqceI3g6kFiXa.png" alt="image-20220619224057060" loading="lazy"></figure>
<p>这样，我们就可以很好解决上面的代码复用性的问题，我们只需要将会重复使用的逻辑代码定义到函数中，当我们需要执行时，直接调用编写好的函数就可以了，这样是不是简单多了？</p>
<pre><code class="language-c">int main() {
    int a = 10;

    test();   //多次使用的情况下，函数会让我们的程序简单很多

    if(a &gt; 20) test();

    switch (a) {
        case 30:
            test();
    }
}
</code></pre>
<p>当然函数除了可以实现代码的复用之外，也可以优化我们的程序，让我们的代码写得更有层次感，我们的程序可能会有很多很多的功能，需要写很多的代码，但是谁愿意去看一个几百行上千行的<code>main</code>函数呢？我们可以将每个功能都写到一个对应的函数中，这样就可以大大减少<code>main</code>函数中的代码量了。</p>
<pre><code class="language-c">int main() {
    func1();   //直接把多行代码写到一个函数中，在main中调用对应的函数，这样能够大幅度减少代码量
    func2();
    func3();
}
</code></pre>
<p>而我们从一开始就在编写main函数实际上是一种比较特殊的函数，C语言规定程序一律从主函数开始执行，所以这也是为什么我们一定要写成<code>int main()</code>的形式。</p>
<h3 id="全局变量和局部变量">全局变量和局部变量</h3>
<p>现在我们已经了解了如何创建和调用函数，在继续学习后续内容之前，我们需要先认识一下全局变量和局部变量这两个概念（啊这，变量就变量，还分这么细啊？）</p>
<p>我们首先来看看局部变量，实际上我们之前使用的都是局部变量，比如：</p>
<pre><code class="language-c">int main() {
    int i = 10;   //这里定义的变量i实际上是main函数中的局部变量，它的作用域只能是main函数中，也就是说其他地方是无法使用的
}
</code></pre>
<p>局部变量只会在其作用域中生效：</p>
<figure data-type="image" tabindex="2"><img src="https://s2.loli.net/2022/06/21/1sTwRq95uWce3Az.png" alt="image-20220621104906130" loading="lazy"></figure>
<p>可以看到在其他函数中，无法使用main函数中的变量，因为局部变量的作用域是有限的，比如位于某个函数内部的变量，那么它的作用域就是整个函数内部，而在其他位置均无法访问。又比如我们之前学习的for循环，当我们这样定义时：</p>
<figure data-type="image" tabindex="3"><img src="https://s2.loli.net/2022/06/21/NohbirYPSBVLQap.png" alt="image-20220621110340649" loading="lazy"></figure>
<p>可以看到，在for循环中定义的变量i，只能在for循环内部使用，而出了这个花括号之后就用不了了，当然由于作用域不同，所以下面这种写法是完全没问题的：</p>
<pre><code class="language-c">int main() {
    for (int i = 0; i &lt; 10; ++i) {   //虽然这里写了两个for都使用了i，但是由于处于两个不同的作用域，所以这两个i半毛钱关系都没有

    }

    for (int i = 0; i &lt; 20; ++i) {

    }
}
</code></pre>
<p>所以，清楚了局部变量的作用域之后，我们在编写程序的时候就很清楚了：</p>
<figure data-type="image" tabindex="4"><img src="https://s2.loli.net/2022/06/21/jPTobYLNdn6sgcH.png" alt="image-20220621110503710" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://s2.loli.net/2022/06/21/PaACqnRBTNXkESY.png" alt="image-20220621110555759" loading="lazy"></figure>
<p>那么如果现在我们想要在任何位置都能使用一个变量，该怎么办呢？这时就要用到全局变量了：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void test();

int a = 10;   //我们可以直接将变量定义放在外面，这样所有的函数都可以访问了

int main() {
    a += 10;
    test();    //现在各位觉得，这两个操作完成后，a会是多少呢？
    printf(&quot;%d&quot;, a);
}

void test(){
    a += 10;
}
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://s2.loli.net/2022/06/21/Sdya9HZ7lDMTcIA.png" alt="image-20220621111319786" loading="lazy"></figure>
<p>因为现在所有函数都能使用全局变量，所以这个结果不难得到。</p>
<h3 id="函数参数和返回">函数参数和返回</h3>
<p>我们的函数可以接受参数来完成任务，比如我们现在想要实现<strong>用一个函数计算两个数的和并输出到控制台。</strong></p>
<p>这种情况我们就需要将我们需要进行加法计算的两个数，告诉函数，这样函数才能对这两个数求和，那么怎么才能告诉函数呢？我们可以通过设定参数：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void test(int, int);   //函数原型中需要写上需要的参数类型，多个参数用逗号隔开，比如这里我们需要的就是两个int类型的参数

int main() {

}

void test(int a, int b){  //函数具体定义中也要写上，这里的a和b我们称为形式参数（形参），等价于函数中的局部变量，作用域仅限此函数
		printf(&quot;%d&quot;, a + b);
}
</code></pre>
<p>那么现在定义完成了，该如何使用这个函数呢，还记得我们怎么使用<code>printf</code>函数的吗？我们只需要把它所需要的参数填入即可：</p>
<pre><code class="language-c">int main() {
    test(10, 20);   //这里直接填写一个常量、变量或是运算表达式都是可以的，我们称实际传入的值为实际参数（实参）
}
</code></pre>
<p>可以看到，成功计算出结果：</p>
<figure data-type="image" tabindex="7"><img src="https://s2.loli.net/2022/06/21/dauFW2DNL3PnvYG.png" alt="image-20220621113243405" loading="lazy"></figure>
<p>实际上我们传入的实参在进入到函数时，会自动给函数中形参（局部变量）进行赋值，这样我们在函数中就可以得到外部传入的参数值了。</p>
<figure data-type="image" tabindex="8"><img src="https://s2.loli.net/2022/06/23/8zv1O5ZYAQTJNoV.png" alt="image-20220623224355944" loading="lazy"></figure>
<p>我们来看看<code>printf</code>函数是怎么写的：</p>
<pre><code class="language-c">int  printf(const char * __restrict, ...) __printflike(1, 2);   //看起来比较高级
</code></pre>
<p>这里我们主要关心它的两个参数，一个是<code>char *</code>由于还没有学习指针，这里就把它当做<code>const char[]</code>就行了，表示一个不可修改的字符串，而第二个参数我们看到是<code>...</code>，这三个点是个啥？</p>
<p>我们知道，如果我们想要填写具体需要打印的值时，可以一直往后写：</p>
<pre><code class="language-c">printf(&quot;%d, %d&quot;, 1, 2);   //参数可以一直写
</code></pre>
<p>正常情况下我们函数的参数列表都是固定的，怎么才能像这样写很多个呢？这就要用到可变长参数了，不过可变长参数的使用比较麻烦，这里我们就不做讲解了。</p>
<p>这里给大家提一个问题，如果我们修改形式参数的值，外面的实参值会跟着发生修改吗？</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void swap(int, int);

int main() {
    int a = 10, b = 20;
    swap(a, b);

    printf(&quot;a = %d, b = %d&quot;, a, b);   //最后会得到什么结果？
}

void swap(int a, int b){
    int tmp = a;   //这里对a和b的值进行交换
    a = b;
    b = tmp;
}
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://s2.loli.net/2022/06/23/5QbExfHNM76pBOY.png" alt="image-20220623224752943" loading="lazy"></figure>
<p>通过结果发现，虽然调用了函数对a和b的值进行交换，但貌似并没有什么卵用。这是为什么呢？</p>
<p>还记得我们前面说的吗，函数的形参实际上就是函数内的局部变量，它的作用域仅仅是这个函数，而我们外面传入的实参，仅仅知识将值赋值给了函数内的形参而已，并且外部的变量跟函数内部的变量作用域都不同，所以半毛钱关系都没有，这里交换的仅仅是函数内部的两个形参变量值，跟外部作实参的变量没有任何关系。</p>
<p>那么，怎么样才能实现通过函数交换两个变量的值呢？这个问题我们会在指针部分进行讨论。</p>
<p>不过数组却不受限制，我们在函数中修改数组的值，是直接可以生效的：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void test(int arr[]);

int main() {
    int arr[] = {4, 3, 8, 2, 1, 7, 5, 6, 9, 0};
    test(arr);
    printf(&quot;%d&quot;, arr[0]);  //打印的是修改后的值了
}

void test(int arr[]) {
    arr[0] = 999;   //数组就可以做到这边修改，外面生效
}
</code></pre>
<p>我们再来看一个例子：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void test(int a){
    a += 10;
    printf(&quot;%d\n&quot;, a);
}

int main() {
    int a = 10;
    test(a);
    test(a);   //连续两次调用，那么这两次的结果会是什么？
}
</code></pre>
<p>可以看到结果都是20，（如果猜对了可以直接跳过，如果你猜测的是20和30的话，需要听我解释了）注意每次调用函数都是单独进行的，并不是复用函数中的形参，不要认为第一次调用函数test就将函数的局部变量变成20了，再次调用就是20+10变成30。实际上这两次调用都是单独进行的，形参a都是在一开始的时候被赋值为实参的值的，这两次调用没有任何关系，并且函数执行完毕后就自动销毁了。</p>
<p>那要是我就希望每次调用函数时保留变量的值呢？我们可以使用静态变量：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void test();

int main() {
    test();
    test();
}

void test() {
    static int a = 20;   //静态变量并不会在函数结束时销毁其值，而是保持
    a += 20;
    printf(&quot;%d &quot;, a);
}
</code></pre>
<p>我们接着来看函数的返回值，并不是所有的函数都是执行完毕就结束了的，可能某些时候我们需要函数告诉我们执行的结果如何，这时我们就需要用到返回值了，比如现在我们希望实现一个函数计算a+b的值：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int sum(int ,int );   //现在我们要返回a和b的和（那么肯定也是int类型）所以这里需要将返回值类型修改为int

int main() {
    int a = 10, b = 20;   //计算a和b的和
  	int result = sum(a, b);   //函数执行后，会返回一个int类型的结果，我们可以接收它，也可以像下面一样直接打印，当然也可以参与运算等等。
    printf(&quot;a+b=%d&quot;, sum(a, b));
}

int sum(int a, int b) {
    return a + b;   //通过return关键字来返回计算的结果
}
</code></pre>
<p>我们接着来看下一个例子，现在我们希望你通过函数找到数组中第一个小于0的数字并将其返回，如果没有找到任何小于0的数，就返回0即可：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int findMin(int arr[], int len);   //需要两个参数，一个是数组本身，还有一个是数组的长度

int main() {
    int arr[] = {1, 4, -9, 2, -4, 7};
    int min = findMin(arr, 6);
    printf(&quot;第一个小于0的数是：%d&quot;, min);
}

int findMin(int arr[], int len) {
    for (int i = 0; i &lt; len; ++i) {
        if(arr[i] &lt; 0) return arr[i];   //当判断找到后，直接return返回即可，这样的话函数会直接返回结果，无论后面还有没有代码没有执行完，整个函数都会直接结束。
    }
    return 0;   //如果没有找到就返回0
}
</code></pre>
<figure data-type="image" tabindex="10"><img src="https://s2.loli.net/2022/06/23/fRw8nbV15dQGIUH.png" alt="image-20220623231617525" loading="lazy"></figure>
<p>这里我们使用了<code>return</code>关键字来返回结果，注意当我们的程序走到<code>return</code>时，无论还有什么内容没执行完，整个函数都将结束，并返回结果。注意带返回值（非void）的函数中的所有情况都需要有一个对应的返回值：</p>
<pre><code class="language-c">int test(int a) {
    if (a &gt; 0) {
        return 10;   //当a大于0时有返回语句
    } else{
          //但是当a不大于0时就没有返回值了，这样虽然可以编译通过，但是会有警告（黄标），运行后可能会出现一些无法预知的问题
    }
}
</code></pre>
<p>如果是没有返回值的函数，我们也可以调用<code>return</code>来返回，不过默认情况下是可以省略的：</p>
<pre><code class="language-c">void test(int a){
    if(a == 10) return;   //因为是void，所以什么都不需要加，直接return
    printf(&quot;%d&quot;, a);
}
</code></pre>
<h3 id="递归调用">递归调用</h3>
<p>我们的函数除了在其他地方被调用之外，也可以自己调用自己（好家伙，套娃是吧），这种玩法我们称为递归。</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void test(){
    printf(&quot;Hello World!\n&quot;);
    test();   //函数自己在调用自己，这样的话下一轮又会进入到这个函数中
}

int main() {
    test();
}
</code></pre>
<p>我们可以尝试运行一下上面的程序，会发现程序直接无限打印<code>Hello World!</code>这个字符串，这是因为函数自己在调用自己，不断地重复进入到这个函数，理论情况下，它将永远都不会结束，而是无限地执行这个函数的内容。</p>
<figure data-type="image" tabindex="11"><img src="https://s2.loli.net/2022/06/23/feq6xUPDjSLAKYF.png" alt="image-20220623233305190" loading="lazy"></figure>
<p>但是到最后我们的程序还是终止了，这是因为函数调用有最大的深度限制，因为计算机不可能放任函数无限地进行下去。</p>
<blockquote>
<p><strong>（选学）<strong>我们来大致了解一下函数的调用过程，实际上在程序运行时会有一个叫做</strong>函数调用栈</strong>的东西，它用于控制函数的调用：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;   //我们以下面的调用关系为例

void test2(){
 printf(&quot;giao&quot;);
}

void test(){
 test2();   //main -&gt; test -&gt; test2
	printf(&quot;giao&quot;);
}

int main() {
 test();
	printf(&quot;giao&quot;);
}
</code></pre>
<p>其实我们可以很轻易地看出整个调用关系，首先是从main函数进入，然后调用test函数，在test函数中又调用了test2函数，此时我们就需要等待test2函数执行完毕，test才能继续，而main则需要等待test执行完毕才能继续。而实际上这个过程是由函数调用栈在控制的：</p>
<figure data-type="image" tabindex="12"><img src="https://s2.loli.net/2022/06/23/lAfGyoDWBstz6bm.png" alt="image-20220623235007335" loading="lazy"></figure>
<p>而当test2函数执行完毕后，每个栈帧又依次从栈中出去：</p>
<figure data-type="image" tabindex="13"><img src="https://s2.loli.net/2022/06/23/IWYsq8m2htNeEaP.png" alt="image-20220623235649397" loading="lazy"></figure>
<p>当所有的栈全部出去之后，程序结束。</p>
<p>所以这也就不难解释为什么无限递归会导致程序出现错误，因为栈的空间有限，而函数又一直在进行自我调用，所以会导致不断地有新的栈帧进入，最后塞满整个栈的空间，就爆炸了，这种问题我们称为栈溢出（Stack Overflow）</p>
</blockquote>
<p>当然，如果我们好好地按照规范使用递归操作，是非常方便的，比如我们现在需要求某个数的阶乘：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int test(int n);

int main() {
    printf(&quot;%d&quot;, test(3));
}

int test(int n){
    if(n == 1) return 1;   //因为不能无限制递归下去，所以我们这里添加一个结束条件，在n = 1时返回
    return test(n - 1) * n;  //每次都让n乘以其下一级的计算结果，下一级就是n-1了
}
</code></pre>
<p>通过给递归调用适当地添加结束条件，这样就不会无限循环了，并且我们的程序看起来无比简洁，那么它是如何执行的呢：</p>
<figure data-type="image" tabindex="14"><img src="https://s2.loli.net/2022/06/24/SsJWqGKyQko47Mm.png" alt="image-20220624002051266" loading="lazy"></figure>
<p>它看起来就像是一个先走到底部，然后拿到问题的钥匙后逐步返回的一个过程，并在返回的途中不断进行计算最后得到结果（妙啊）</p>
<p>所以，合理地使用递归反而是一件很有意思的事情。</p>
<h3 id="实战斐波那契数列解法其三">实战：斐波那契数列解法其三</h3>
<p>前面我们介绍了函数的递归调用，我们来看一个具体的实例吧，我们还是以解斐波那契数列为例。</p>
<p>既然每个数都是前两个数之和，那么我们是否也可以通过递归的形式不断划分进行计算呢？我们依然可以借鉴之前动态规划的思想，通过划分子问题，分而治之来完成计算。</p>
<h3 id="实战汉诺塔">实战：汉诺塔</h3>
<p>什么是汉诺塔？</p>
<blockquote>
<p><strong>汉诺塔</strong>（Tower of Hanoi），又称<strong>河内塔</strong>，是一个源于<a href="https://baike.baidu.com/item/%E5%8D%B0%E5%BA%A6/121904">印度</a>古老传说的<a href="https://baike.baidu.com/item/%E7%9B%8A%E6%99%BA%E7%8E%A9%E5%85%B7/223159">益智玩具</a>。<a href="https://baike.baidu.com/item/%E5%A4%A7%E6%A2%B5%E5%A4%A9/711550">大梵天</a>创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令<a href="https://baike.baidu.com/item/%E5%A9%86%E7%BD%97%E9%97%A8/1796550">婆罗门</a>把圆盘从下面开始</p>
<p><strong>按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</strong></p>
</blockquote>
<figure data-type="image" tabindex="15"><img src="https://s2.loli.net/2022/06/24/Z7iN526FOQLS3Kz.png" alt="image-20220624002507501" loading="lazy"></figure>
<p>这三根柱子我们就依次命名为A、B、C，现在请你设计一个C语言程序，计算N阶（n片圆盘）汉诺塔移动操作的每一步。</p>
<p>这个问题看似很难，实际上我们也可以对每一步进行推理：</p>
<blockquote>
<p>当汉诺塔只有1阶的情况下：直接把A上的圆盘移动到C，搞定。</p>
</blockquote>
<blockquote>
<p>当汉诺塔只有2阶的情况下：我们的最终目标还是需要将A柱最下面的圆盘丢到C，不过现在多了圆盘，我们得先把这个圆盘给处理了，所以我们得把这上面的1个圆盘丢到B上去，这样才能把A最下面的圆盘丢给C。然后再把B上面的1个圆盘丢到C上去</p>
</blockquote>
<blockquote>
<p>当汉诺塔只有3阶的情况下：我们的最终目标还是需要将A柱最下面的圆盘丢到C，不过现在多了圆盘，我们得先把这个圆盘给处理了，所以我们得把这上面的2个圆盘丢到B上去，这样才能把A最下面的圆盘丢给C。然后再把B上面的2个圆盘丢到C上</p>
</blockquote>
<p>实际上我们发现，把A移动到C是一定要进行的，而在进行之前需要先把压在上面全部的圆盘全部放到B去。而移动之后也要把B上的圆盘全部移动到C上去。其实所有的情况下最终都会有一个n=1的情况，将A上的最后一个圆盘移动到C，只是多了一个前面的步骤和后面的步骤。</p>
<p>不过难点就是，怎么把A上的n-1个圆盘移动到B去呢？其实这时我们可以依靠C作为中间商，来帮助我们移动（比如n = 3，那么先把最上面的移动到C，然后把第二大的移动到B，再从C上把最小的移动到B上，这样就借助了C完成了两个圆盘的转移），而最后又怎么把B上的圆盘全部移到C去呢，这时就可以依靠A作为中间商，方法同理；实际上大问题最后都会变成n = 2时这样的小问题，只不过是要移动目标不同罢了。</p>
<p>只要想通了怎么去借助中间商进行移动，就很好写出程序了。</p>
<p>递归函数如下设计：</p>
<pre><code class="language-c">//a存放圆盘的初始柱子，b作为中间柱子存放使用，c作为目标柱子，n表示要从a移动到c的圆盘数
void hanoi(char a, char b, char c, int n){
    
}
</code></pre>
<p>现在我们来实现一下吧。</p>
<pre><code class="language-c">void move(char start, char end, int n){   //用于打印移动操作到控制台，start是起始柱子，end是结束柱子，n是哪一个圆盘
    printf(&quot;第%d个圆盘：%c --&gt; %c\n&quot;, n, start, end);
}

void hanoi(char a, char b, char c, int n){  //刚进来的时候，B作为中间柱子，C作为目标柱子，要移动A上的n个圆盘到C去
    if(n == 1) {
        move(a, c, n);   //无论a,b,c如何变换，通过递归，最后都会变成一个n = 1的问题，直接移动就完事了
    } else{
        hanoi(a, c ,b, n - 1);  //首要目标是先把上面n-1个圆盘全部放到B去，这里就变换一下，让B作为目标柱子，C作为中间
        move(a, c, n);   //现在A上只剩下一个最大的圆盘了，接着把A最下方的一个圆盘移到C去
        hanoi(b, a, c, n - 1);   //最后需要把B上的全部搬到C上去，这里就可以以C为目标柱子，A为中间柱子
    }
}
</code></pre>
<p>简化一波：</p>
<pre><code class="language-c">void hanoi(char a, char b, char c, int n){
    if(n == 0) return;
    hanoi(a, c ,b, n - 1);
    printf(&quot;第%d个圆盘：%c --&gt; %c\n&quot;, n, a, c);
    hanoi(b, a, c, n - 1);
}
</code></pre>
<p>看似如此复杂的问题，其实只需要4行就可以解决了。</p>
<h3 id="实战快速排序算法选学">实战：快速排序算法（选学）</h3>
<p>有一个数组：</p>
<pre><code class="language-c">int arr[] = {4, 3, 8, 2, 1, 7, 5, 6, 9, 0};
</code></pre>
<p>现在请你设计一个C语言程序，对数组按照从小到大的顺序进行排序。这里我们使用冒泡排序的进阶版本——<strong>快速排序</strong>来完成，它的核心思想是分而治之，每一轮排序都会选出一个基准，一轮排序完成后，所以比基准小的数一定在左边，比基准大的数一定在右边，在分别通过同样的方法对左右两边的数组进行排序，不断划分，最后完成整个数组的排序。它的效率相比冒泡排序的双重for循环有所提升。</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void quickSort(int arr[], int left, int right){  //arr是数组，left是起始下标，right是结束下标
    //请实现这一部分
}

int main() {
    int arr[] = {4, 3, 8, 2, 1, 7, 5, 6, 9, 0};
    quickSort(arr, 0, 9);  //10个数字下标就是0-9
    for (int i = 0; i &lt; 10; ++i) {
        printf(&quot;%d &quot;, arr[i]);
    }
}
</code></pre>
<p>不过虽然这种排序算法很快，但是极端情况下（比如遇到了刚好倒序的数组）还是会退化成冒泡排序的。</p>
<hr>
<h2 id="指针">指针</h2>
<p>指针可以说是整个C语言中最难以理解的部分了，不过其实说简单也简单，你会发现也并没有想象中的那么难，你与它的距离可能只差了那么一些基础知识，这一部分都会及时进行补充的。</p>
<h3 id="什么是指针">什么是指针</h3>
<p>还记得我们在上一个部分谈到的通过函数交换两个变量的值吗？</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void swap(int, int);

int main() {
    int a = 10, b = 20;
    swap(a, b);

    printf(&quot;a = %d, b = %d&quot;, a, b);   //最后会得到什么结果？
}

void swap(int a, int b){
    int tmp = a;   //这里对a和b的值进行交换
    a = b;
    b = tmp;
}
</code></pre>
<p>实际上这种写法是错误的，因为交换的并非是真正的a和b，而是函数中的局部变量。那么有没有办法能够直接对函数外部的变量进行操作呢？这就需要指针的帮助了。</p>
<p>我们知道，程序中使用的变量实际上都在内存中创建的，每个变量都会被保存在内存的某一个位置上（具体在哪个位置是由系统分配的），就像我们最终会在这个世界上的某个角落安家一样，所有的变量在对应的内存位置上都有一个地址（地址是独一无二的），而我们可以通过这个地址寻找到这个变量本体，比如int占据4字节，因此int类型变量的地址就是这4个字节的起始地址，后面32个bit位全部都是用于存放此变量的值的。</p>
<figure data-type="image" tabindex="16"><img src="https://s2.loli.net/2022/06/24/zi5ZwxK76REpYUI.png" alt="image-20220624221635066" loading="lazy"></figure>
<p>这里的<code>0x</code>是十六进制的表示形式（10-15用字母A - F表示）如果我们能够知道变量的内存地址，那么无论身在何处，都可以通过地址找到这个变量了。而指针的作用，就是专门用来保存这个内存地址的。</p>
<p>我们来看看如何创建一个指针变量用于保存变量的内存地址：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main(){
    int a = 10;
  	//指针类型需要与变量的类型相同，且后面需要添加一个*符号（注意这里不是乘法运算）表示是对于类型的指针
    int * p = &amp;a;   //这里的&amp;并不是进行按位与运算，而是取地址操作，也就是拿到变量a的地址
    printf(&quot;a在内存中的地址为：%p&quot;, p);  //地址使用%p表示
}
</code></pre>
<figure data-type="image" tabindex="17"><img src="https://s2.loli.net/2022/06/24/Pb3cWuOFIMkJLEa.png" alt="image-20220624222718731" loading="lazy"></figure>
<p>可以看到，我们通过取地址操作<code>&amp;</code>，将变量a的地址保存到了一个地址变量<code>p</code>中。</p>
<p>拿到指针之后，我们可以很轻松地获取指针所指地址上的值：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main(){
    int a = 666;
    int * p = &amp;a;
    printf(&quot;内存%p上存储的值为：%d&quot;, p, *p);   //我们可以在指针变量前添加一个*号（间接运算符，也可以叫做解引用运算符）来获取对应地址存储的值
}
</code></pre>
<p>注意这里访问指针所指向地址的值时，是根据类型来获取的，比如int类型占据4个字节，那么就读取地址后面4个字节的内容作为一个int值，如果指针是char类型的，那么就只读取地址后面1个字节作为char类型的值。</p>
<figure data-type="image" tabindex="18"><img src="https://s2.loli.net/2022/06/24/GHS8UAoKNT6vZXy.png" alt="image-20220624224026228" loading="lazy"></figure>
<p>同样的，我们也可以直接像这样去修改对应地址存放的值：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main(){
    int a = 666;
    int * p = &amp;a;

    *p = 999;   //通过*来访问对应地址的值，并通过赋值运算对其进行修改

    printf(&quot;a的值为：%d&quot;, a);
}
</code></pre>
<figure data-type="image" tabindex="19"><img src="https://s2.loli.net/2022/06/24/3gFKBEuRQlD8wpq.png" alt="image-20220624225026394" loading="lazy"></figure>
<p>实际上拿到一个变量的地址之后，我们完全不需要再使用这个变量，而是可以通过它的指针来对其进行各种修改。因此，现在我们想要实现对两个变量的值进行交换的函数就很简单了：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

// 这里是两个指针类型的形参，其值为实参传入的地址，
// 虽然依然是值传递，但是这里传递的可是地址啊，
// 只要知道地址改变量还不是轻轻松松？
void swap(int * a, int * b){
    int tmp = *a;   //先暂存一下变量a地址上的值
    *a = *b;   //将变量b地址上的值赋值给变量a对应的位置
    *b = tmp;   //最后将a的值赋值给b对应位置，OK，这样就成功交换两个变量的值了
}

int main(){
    int a = 10, b = 20;
    swap(&amp;a, &amp;b);   //只需要把a和b的内存地址给过去就行了，这里取一下地址
    printf(&quot;a = %d, b = %d&quot;, a, b);
}
</code></pre>
<figure data-type="image" tabindex="20"><img src="https://s2.loli.net/2022/06/24/8U6pSiKeEFTg2H4.png" alt="image-20220624225800731" loading="lazy"></figure>
<p>通过地址操作，我们就轻松实现了使用函数交换两个变量的值了。</p>
<p>了解了指针的相关操作之后，我们再来看看<code>scanf</code>函数，实际上就很好理解了：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main(){
    int a;
    scanf(&quot;%d&quot;, &amp;a);   //这里就是取地址，我们需要告诉scanf函数变量的地址，这样它才能通过指针访问变量的内存地址，对我们变量的值进行修改，这也是为什么scanf里面的变量（除数组外）前面都要进行一个取地址操作
    printf(&quot;%d&quot;, a);
}
</code></pre>
<p>当然，和变量一样，要是咱们不给指针变量赋初始值的话，就不知道指的哪里了，因为指针变量也是变量，存放的其他变量的地址值也在内存中保存，如果不给初始值，那么存放别人地址的这块内存可能在其他地方使用过，这样就不知道初始值是多少了（那么指向的地址可能是一个很危险的地址，随意使用可能导致会出现严重错误），所以一定要记得给个初始值或是将其设定为NULL，表示空指针，不指向任何内容。</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main(){
    int * a = NULL;
}
</code></pre>
<p>我们接着来看看<code>const</code>类型的指针，这种指针比较特殊：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main(){
    int a = 9, b = 10;
    const int * p = &amp;a;
    *p = 20;   //这里直接报错，因为被const标记的指针，所指地址上的值不允许发生修改
  	p = &amp;b;   //但是指针指向的地址是可以发生改变的
}
</code></pre>
<p>我们再来看另一种情况：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main(){
    int a = 9, b = 10;
    int * const p = &amp;a;   //const关键字被放在了类型后面
    *p = 20;   //允许修改所指地址上的值
    p = &amp;b;   //但是不允许修改指针存储的地址值，其实就是反过来了。
}
</code></pre>
<p>当然也可以双管齐下：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main(){
    int a = 9, b = 10;
    const int * const p = &amp;a;
    *p = 20;   //两个都直接报错，都不让改了
    p = &amp;b;
}
</code></pre>
<h3 id="指针与数组">指针与数组</h3>
<p>前面我们介绍了指针的基本使用，我们来回顾一个问题，为什么数组可以以原身在函数之间进行传递呢？先说结论，数组表示法实际上是在变相地使用指针，你甚至可以将其理解为数组变量其实就是一个指针变量，它存放的就是数组中第一个元素的起始地址。</p>
<p>为什么这么说？</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main(){
    char str[] = &quot;Hello World!&quot;;
    char * p = str;   //？？？啥情况，为什么能直接把数组作为地址赋值给指针变量p？？？

    printf(&quot;%c&quot;, *p);   //还能正常使用，打印出第一个字符？？？
}
</code></pre>
<figure data-type="image" tabindex="21"><img src="https://s2.loli.net/2022/06/24/WaPeLR8o295YpsC.png" alt="image-20220624231833371" loading="lazy"></figure>
<p>你以为这就完了？还能这样玩呢：</p>
<pre><code class="language-c">int main(){
    char str[] = &quot;Hello World!&quot;;
    char * p = str;

    printf(&quot;%c&quot;, p[1]);   //？？？怎么像在使用数组一样用指针？？？
}
</code></pre>
<figure data-type="image" tabindex="22"><img src="https://s2.loli.net/2022/06/24/hV6orYOmebDRyJG.png" alt="image-20220624232337311" loading="lazy"></figure>
<p>太迷了吧，怎么数组和指针还能这样混着用呢？我们先来看看数组在内存中是如何存放的：</p>
<figure data-type="image" tabindex="23"><img src="https://s2.loli.net/2022/06/24/ij6eKTYqDSxL7tE.png" alt="image-20220624233249216" loading="lazy"></figure>
<p>数组在内存中是一块连续的空间，所以为什么声明数组一定要明确类型和大小，因为这一块连续的内存空间生成后就固定了。</p>
<p>而我们的数组变量实际上存放的就是首元素的地址，而实际上我们之前一直使用的都是<strong>数组表示法</strong>来操作数组，这样可以很方便地让我们对内存中的各个元素值进行操作：</p>
<pre><code class="language-c">int main(){
    char str[] = &quot;Hello World!&quot;;
    printf(&quot;%c&quot;, str[0]);   //直接在中括号中输入对应的下标就能访问对应位置上的数组了
}
</code></pre>
<p>而我们知道实际上<code>str</code>表示的就是数组的首地址，所以我们完全可以将其赋值给一个指针变量，因为指针变量也是存放的地址：</p>
<pre><code class="language-c">char str[] = &quot;Hello World!&quot;;
char * p = str;   //直接把str代表的首元素地址给到p
</code></pre>
<p>而使用指针后，实际上我们可以使用另一种表示法来操作数组，这种表示法叫做<strong>指针表示法</strong>：</p>
<pre><code class="language-c">int main(){
    char str[] = &quot;Hello World!&quot;;
    char * p = str;

    printf(&quot;第一个元素值为：%c，第二个元素值为：%c&quot;, *p, *(p+1));   //通过指针也可以表示对应位置上的值
}
</code></pre>
<p>比如我们现在需要表示数组中的第二个元素：</p>
<ul>
<li>数组表示法：<code>str[1]</code></li>
<li>指针表示法：<code>*(p+1)</code></li>
</ul>
<p>虽然写法不同，但是他们表示的意义是完全相同的，都代表了数组中的第二个元素，其中指针表示法使用了<code>p+1</code>的形式表示第二个元素，这里的<code>+1</code>操作并不是让地址+1，而是让地址<code>+ 一倍的对应类型大小</code>，也就是说地址后移一个char的长度，所以正好指向了第二个元素，然后通过<code>*</code>取到对应的值（注意这种操作仅对数组是有意义的，如果是普通的变量，虽然也可以通过这种方式获得后一个char的长度的数据，但是毫无意义）</p>
<pre><code class="language-c">*(p+i)   &lt;=&gt;    str[i]    //实际上就是可以相互转换的
</code></pre>
<p>这两种表示法都可以对内存中存放的数组内容进行操作，只是写法不同罢了，所以你会看到数组和指针混用也就不奇怪了。了解了这些东西之后，我们来看看下面的各个表达式分别代表什么：</p>
<pre><code class="language-c">*p   //数组的第一个元素
p   //数组的第一个元素的地址
p == str   //肯定是真，因为都是数组首元素地址
*str    //因为str就是首元素的地址，所以这里对地址加*就代表第一个元素，使用的是指针表示法
&amp;str[0]   //这里得到的实际上还是首元素的地址
*(p + 1)   //代表第二个元素
p + 1    //第二个元素的内存地址
*p + 1    //注意*的优先级比+要高，所以这里代表的是首元素的值+1，得到字符'K'
</code></pre>
<p>所以不难理解，为什么<code>printf</code>函数的参数是一个<code>const char * </code>了，实际上就是需要我们传入一个字符串而已，只不过这里采用的是指针表示法而已。</p>
<p>当然指针也可以进行自增和自减操作，比如：</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[c1]]></title>
        <id>https://dengbowang.github.io/post/c1/</id>
        <link href="https://dengbowang.github.io/post/c1/">
        </link>
        <updated>2022-11-06T12:45:50.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rcjsrnpyj21g40i642g.jpg" alt="image-20220531094944782" loading="lazy"></figure>
<p>**温馨提示：**所有的笔记（需要使用Typora软件打开）在视频下方简介中直接获取，纯个人录制，不用加什么公众号这些，各位小伙伴直接网盘自取吧。</p>
<h1 id="计算机思维导论">计算机思维导论</h1>
<p>计算机自1946年问世以来，几乎改变了整个世界。</p>
<p>现在我们可以通过电脑来做很多事情，比如我们常常听到的什么人工智能、电子竞技、大数据等等，都和计算机息息相关，包括我们现在的手机、平板等智能设备，也是计算机转变而来的。各位可以看看最顶上的这张图片，如果你在小时候接触过计算机，那么一定对这张图片（照片拍摄于1996年，在美国加利福尼亚州加利福尼亚州的锁诺玛县）印象深刻，这张壁纸作为WindowsXP系统的默认壁纸，曾经展示在千家万户的电脑屏幕上。</p>
<p>也许你没有接触过计算机，也许你唯一接触计算机就是用来打游戏，也有可能你曾经捣鼓过计算机，在学习C语言之前，先让我们来了解一下计算机的世界。</p>
<h2 id="计算机的世界">计算机的世界</h2>
<p>计算机虽然名字听着很高级，不过它也是由一个个简单电路组成的。</p>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rd1x1rtgj21dy0cw74r.jpg" alt="image-20220531100709841" loading="lazy"></figure>
<p>这是我们在初中就学习过的电路图，不过这种电路太过简单，只能完成一些很基础的的操作，比如点亮小灯泡等。</p>
<p>很明显想要实现计算机怎么高级的运算机器，肯定是做不到的，这时我们就需要引入更加强大的数字电路了。</p>
<blockquote>
<p>用数字信号完成对数字量进行<a href="https://baike.baidu.com/item/%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/3118202">算术运算</a>和<a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/7224729">逻辑运算</a>的电路称为数字电路，或数字系统。由于它具有逻辑运算和逻辑处理功能，所以又称数字逻辑电路。现代的数字电路由半导体工艺制成的若干数字集成器件构造而成。逻辑门是数字逻辑电路的<a href="https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E5%8D%95%E5%85%83/5246264">基本单元</a>。</p>
<p>计算机专业一般会在大一开放《数字电路》这门课程，会对计算机底层的数字电路实现原理进行详细介绍。</p>
</blockquote>
<p>数字电路引入了逻辑判断，我们来看看简单的数字电路：</p>
<figure data-type="image" tabindex="3"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rdj1916aj21iq0dygm4.jpg" alt="image-20220531102337270" loading="lazy"></figure>
<p>数字电路中，用电压的高低来区分出两种信号，低电压表示0，高电压表示1，由于只能通过这种方式表示出两种类型的信号，所以计算机采用的是二进制。</p>
<blockquote>
<p><a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6/361457">二进制</a>是计算技术中广泛采用的一种<a href="https://baike.baidu.com/item/%E6%95%B0%E5%88%B6/217113">数制</a>。二进制数据是用0和1两个数码来表示的数。它的<a href="https://baike.baidu.com/item/%E5%9F%BA%E6%95%B0/4260">基数</a>为2，进位规则是“逢二进一”，借位规则是“借一当二”。</p>
<p>比如我们一般采用的都是十进制表示，比如9再继续加1的话，就需要进位了，变成10，在二进制中，因为只有0和1，所以当1继续加1时，就需要进位了，就变成10了（注意这不是十，读成一零就行了）</p>
</blockquote>
<p>当然，仅仅有两种信号还不够，我们还需要逻辑门来辅助我们完成更多的计算，最基本的逻辑关系是与、或、非，而逻辑门就有相应的是<a href="https://baike.baidu.com/item/%E4%B8%8E%E9%97%A8">与门</a>、<a href="https://baike.baidu.com/item/%E6%88%96%E9%97%A8">或门</a>和<a href="https://baike.baidu.com/item/%E9%9D%9E%E9%97%A8">非门</a>，可以用电阻、电容、二极管、三极管等分立原件构成（具体咋构成的咱这里就不说了）</p>
<p>比如与操作，因为只有两种类型，我们一般将1表示为真，0表示为假，与操作（用&amp;表示）要求两个数参与进来，比如：</p>
<ul>
<li>1 &amp; 1 = 1    必须两边都是真，结果才为真。</li>
<li>1 &amp; 0 = 0    两边任意一个或者都不是真，结果为假。</li>
</ul>
<p>或运算（用 | 表示）：</p>
<ul>
<li>1 | 0 = 1    两边只要有一个为真，结果就为真</li>
<li>0 | 0 = 0    两边同时为假，结果才是假</li>
</ul>
<p>非运算实际上就是取反操作（可以是 ! 表示）</p>
<ul>
<li>!1 = 0</li>
<li>!0 = 1     非运算会将真变成假，假变成真</li>
</ul>
<p>有了这些运算之后，我们的电路不仅仅可以实现计算，也可以实现各种各样的逻辑判断，最终才能发展成我们的计算机。</p>
<p>前面我们大概介绍一下计算机的底层操作原理，接着我们来看看计算机的基本组成。</p>
<figure data-type="image" tabindex="4"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2reca0cgoj20x60b40uu.jpg" alt="image-20220531105143154" loading="lazy"></figure>
<p>相信各位熟知的计算机都是一个屏幕+一个主机的形式，然后配上我们的键盘鼠标，就可以开始使用了，但是实际上标准的计算机结构并没有这么简单，我们来看看：</p>
<figure data-type="image" tabindex="5"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2reersjdmj21k20fqdhl.jpg" alt="image-20220531105407595" loading="lazy"></figure>
<p>我们电脑最核心的部件，当属CPU，因为几乎所有的运算都是依靠CPU进行（各种各样的计算电路已经在CPU中安排好了，我们只需要发送对应的指令就可以进行对应的运算），它就像我们人的大脑一样，有了大脑才能进行思考。不过光有大脑还不行，还要有一些其他的部分来辅助工作，比如我们想向电脑里面打字，那么就需要连接一个键盘才能输入，我们想要点击桌面上的图标，那么就需要一个鼠标来操作光标，这些都是输入设备。我们的电脑开机之后显示器上会显示出画面，实际上显示器就是输出设备。</p>
<p>当然除了这些内容之外，我们的电脑还需要内存来保存运行时的一些数据，以及外存来保存文件（比如硬盘）等。我们常说的iPhone13 512G，这个512G并不是指的内存，而是指的外存，准确的说是用于存放文件硬盘大小，而真正的内存是我们常说的4G/6G/8G运行内存，内存的速度远高于外存的速度，所以1G内存的价格远超1G硬盘的价格。</p>
<figure data-type="image" tabindex="6"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2riw9u06uj21bs0b4jso.jpg" alt="image-20220531132920027" loading="lazy"></figure>
<p>计算机包括五大部件：运算器、控制器、存储器、输入和输出设备。有了这一套完整的硬件环境，我们的电脑才算是有了一个完整的身体。</p>
<p>**问题：**我们上面提到的这些硬件设备哪些是属于外设？</p>
<h2 id="操作系统概述">操作系统概述</h2>
<p>前面我们了解了一下计算机的大致原理和组成结构，但是光有这一套硬件可不行，如何让这一套硬件按照我们想要的方式运作起来，也是非常重要的，这时我们就需要介绍操作系统了。</p>
<blockquote>
<p>操作系统（operating system，简称OS）是管理<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/5459592">计算机硬件</a>与<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>资源的<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F/3220205">计算机程序</a>。操作系统需要处理如管理与<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE/2394679">配置</a><a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98/103614">内存</a>、决定<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90/974435">系统资源</a>供需的优先次序、控制<a href="https://baike.baidu.com/item/%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87/10823368">输入设备</a>与<a href="https://baike.baidu.com/item/%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87/10823333">输出设备</a>、操作网络与管理<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/4827215">文件系统</a>等基本事务。操作系统也提供一个让用户与系统<a href="https://baike.baidu.com/item/%E4%BA%A4%E4%BA%92/6964417">交互</a>操作的界面。</p>
<p>一般在计算机专业大二，会开放《操作系统》课程，会详细讲解操作系统的底层运作机制和调度。</p>
</blockquote>
<p>一般我们电脑上都安装了Windows操作系统（苹果笔记本安装的是MacOS操作系统），现在主流的电脑都已经预装Windows11了：</p>
<figure data-type="image" tabindex="7"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rjnis7lkj21ew0e041a.jpg" alt="image-20220531135531352" loading="lazy"></figure>
<p>有了操作系统，我们的电脑才能真正运行起来，我们就可以轻松地通过键盘和鼠标来操作电脑了。</p>
<p>不过操作系统最开始并不是图形化界面，它类似于Windows中的命令提示符：</p>
<figure data-type="image" tabindex="8"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rkezow9dj21v60ew40f.jpg" alt="image-20220531142155616" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rkjitqqnj21kc08475e.jpg" alt="image-20220531142617124" loading="lazy"></figure>
<p>没有什么图标这些概念，只有一个简简单单的黑框让我们进行操作，通过输入命令来进行一些简单的使用，程序的运行结果也会在黑框框（命令行）中打印出来，不过虽然仅仅是一个黑框，但是能运行的程序可是非常非常多的，只需要运行我们编写好的程序，就能完成各种各样复杂的计算任务，并且计算机的计算速度远超我们的人脑。</p>
<blockquote>
<p>中国超级计算机系统天河二号，计算速度达到每秒5.49亿亿次。</p>
</blockquote>
<p>当然，除了我们常见的Windows和MacOS系统之外，还有我们以后需要经常打交道的Linux操作系统，这种操作系统是开源的，意思是所有的人都可以拿到源代码进行修改，于是就出现了很多发行版：</p>
<figure data-type="image" tabindex="10"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rkm3bo7sj21gk0b4dh3.jpg" alt="image-20220531142844465" loading="lazy"></figure>
<p>这些发行版有带图形化界面的，也有不带图形化界面的，不带图形化界面的Linux将是我们以后学习的重点。</p>
<p>不同操作系统之间的软件并不是通用的，比如Windows下我们的软件一般是.exe后缀名称，而MacOS下则不是，并且也无法直接运行.exe文件，这是因为不同操作系统的具体实现会存在一些不同，程序编译（我们之后会介绍到）之后的格式也会不同，所以是无法做到软件通用的。</p>
<p>正是因为有了操作系统，才能够组织我们计算机的底层硬件（包括CPU、内存、输入输出设备等）进行有序工作，没有操作系统电脑就如同一堆废铁，只有躯壳没有灵魂。</p>
<h2 id="计算机编程语言">计算机编程语言</h2>
<p>现在我们大致了解了我们的电脑的运作原理，实际上是一套完整的硬件+一个成形的操作系统共同存在的。接着我们就可以开始了解一下计算机的编程语言了。我们前面介绍的操作系统也是由编程语言写出来的，操作系统本身也算是一个软件。</p>
<figure data-type="image" tabindex="11"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rl228014j21eq0a2gnf.jpg" alt="image-20220531144405958" loading="lazy"></figure>
<p>那么操作系统是如何让底层硬件进行工作的呢？实际上就是通过向CPU发送指令来完成的。</p>
<blockquote>
<p>计算机指令就是指挥机器工作的指示和命令，程序就是一系列按一定顺序排列的指令，执行程序的过程就是计算机的工作过程。指令集，就是CPU中用来计算和控制计算机系统的一套指令的集合，而每一种新型的CPU在设计时就规定了一系列与其他硬件电路相配合的指令系统。而指令集的先进与否，也关系到CPU的性能发挥，它也是CPU性能体现的一个重要标志。</p>
</blockquote>
<p>我们电脑中的CPU有多种多样的，不同的CPU之间可能也会存在不同的架构，比如现在最常用的是x86架构，还有我们手机平板这样的移动设备使用的arm架构，不同的架构指令集也会有不同。</p>
<p>我们知道，计算机底层硬件都是采用的0和1这样的二进制表示，所以指令也是一样的，比如（这里随便写的）：</p>
<ul>
<li>000001  -  代表开机</li>
<li>000010  -  代表关机</li>
<li>000011  -  代表进行加法运算</li>
</ul>
<p>当我们通过电路发送给CPU这样的二进制指令，CPU就能够根据我们的指令执行对应的任务，而我们编写的程序保存在硬盘中也是这样的二进制形式，我们只需要将这些指令组织好，按照我们的思路一条一条执行对应的命令，就能够让计算机计算任何我们需要的内容了，这其实就是机器语言。</p>
<p>不过随着时代的进步，指令集越来越大，CPU支持的运算类型也越来越多，这样的纯二进制编写实在是太累了，并且越来越多的命令我们根本记不住，于是就有了汇编语言。汇编语言将这些二进制的操作码通过助记符来替换：</p>
<ul>
<li>MOV   传送字或字节。</li>
<li>MOVSX  先符号扩展,再传送。</li>
<li>MOVZX  先零扩展,再传送。</li>
<li>PUSH  把字压入堆栈。</li>
</ul>
<p>把这些原有的二进制命令通过一个单词来代替，这样是不是就好记多了，在程序编写完成后，我们只需要最后将这些单词转换回二进制指令就可以了，这也是早期出现的低级编程语言。</p>
<figure data-type="image" tabindex="12"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rlmjqp3dj217e09agmz.jpg" alt="image-20220531150346899" loading="lazy"></figure>
<p>不过虽然通过这些助记符就能够很轻松地记住命令，但是还是不够方便，因为可能我们的程序需要完成一个很庞大的任务，但是如果还是这样一条一条指令进行编写，是不是太慢了点，有时候可能做一个简单的计算，都需要好几条指令来完成。于是，高级编程语言——C语言，终于诞生了。</p>
<blockquote>
<p>C语言诞生于美国的<a href="https://baike.baidu.com/item/%E8%B4%9D%E5%B0%94%E5%AE%9E%E9%AA%8C%E5%AE%A4/686816">贝尔实验室</a>，由<a href="https://baike.baidu.com/item/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87/7267171">丹尼斯·里奇</a>（Dennis MacAlistair Ritchie）以肯尼斯·蓝·汤普森（Kenneth Lane Thompson）设计的<a href="https://baike.baidu.com/item/B%E8%AF%AD%E8%A8%80/1845842">B语言</a>为基础发展而来，在它的主体设计完成后，汤普森和里奇用它完全重写了UNIX操作系统，且随着UNIX操作系统的发展，C语言也得到了不断的完善。</p>
</blockquote>
<p>高级语言不同于低级语言，低级语言的主要操作对象是指令本身，而高级语言却更加符合我们人脑的认知，更像是通过我们人的思维，去告诉计算机你需要做什么，包括语法也会更加的简单易懂。下面是一段简单的C语言代码：</p>
<pre><code class="language-c">int main() {
  	int a = 10;   //定义一个a等于10
  	int b = 10;   //定义一个b等于10
  	int c = a + b;   //语义非常明确，c就是a加上b计算出来的结果。
  	return 0;
}
</code></pre>
<p>不过现在看不懂没关系，我们后面慢慢学。</p>
<p>C语言虽然支持按照我们更容易理解的方式去进行编程，但是最后还是会编译成汇编指令最后变成计算机可以直接执行的指令，不过具体的编译过程，我们不需要再关心了，我们只需要去写就可以了，而对我们代码进行编译的东西，称为编译器。</p>
<figure data-type="image" tabindex="13"><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2uzn81nwsj21qk07mdhd.jpg" alt="image-20220603123928430" loading="lazy"></figure>
<p>当然，除了C语言之外，还有很多其他的高级语言，比如Java、Python、C#、PHP等等，相比其他编程语言，C算是比较古老的一种了，但是时隔多年直至今日，其他编程语言也依然无法撼动它的王者地位：</p>
<figure data-type="image" tabindex="14"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rlw7fvhmj20xo0b0wf4.jpg" alt="image-20220531151304124" loading="lazy"></figure>
<p>可以看到在2021年9月，依然排在编程语言排行榜的<strong>第一名</strong>（Python和Java紧随其后），可见这门语言是多么的不可撼动，很多操作系统、高级编程语言底层实现，几乎都是依靠C语言去编写的（包括Java的底层也是C/C++实现的）所以学习这一门语言，对于理工科尤其是计算机专业极为重要，学好C语言你甚至可以融汇贯通到其他语言，学起来也会轻松很多。</p>
<p>那么从下节课开始，我们就先做好一些环境上的准备。</p>
<h2 id="c语言开发环境部署">C语言开发环境部署</h2>
<p>完成开发环境部署之后，我们就可以使用C语言来将一句话输出到控制台了，成功编译运行下面的简单程序：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main() {
    printf(&quot;Hello, World!\n&quot;);
    return 0;
}
</code></pre>
<p>首先，我们既然要将我们编写的C语言代码进行编译，那么肯定得找到一个合适的编译器才行，现代的集成开发环境IDE一般都包含了这些编译器，所以我们不需要进行单独的安装。</p>
<p>我们只需要找一个集成开发环境去安装就行了，目前功能比较完善的集成开发环境有：</p>
<ul>
<li>Codeblocks（支持Windows、Linux、MacOS操作系统）</li>
<li>Visual Studio（支持Windows、MacOS操作系统）</li>
<li>CLion（支持Windows、Linux、MacOS操作系统）</li>
</ul>
<p>这里我们就使用CLion作为我们的开发工具使用（这个IDE是收费的，但是学生可以申请免费使用，别担心，大学四年肯定是够你用了，选这个是考虑到后面同学们可能会继续学习Java，Java语言的推荐IDE也是同一个公司的产品，界面都长得差不多）当然如果你想要使用其他的开发工具，也可以，但是这里我们就不演示了。</p>
<p>首先前往官网下载：<a href="https://www.jetbrains.com/clion/">CLion: A Cross-Platform IDE for C and C++ by JetBrains</a></p>
<figure data-type="image" tabindex="15"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rn0oo80lj22h00eudia.jpg" alt="image-20220531155158399" loading="lazy"></figure>
<p>下载完成后我们直接点击安装：</p>
<figure data-type="image" tabindex="16"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rna8jfzdj21wa0lg438.jpg" alt="image-20220531160109168" loading="lazy"></figure>
<p>如果你不是很熟悉，建议直接点Next安装到C盘默认路径，不要去修改，当然如果确实C盘没有空间，那可以自行修改为其他路径，但是注意最好路径中不要出现中文。</p>
<figure data-type="image" tabindex="17"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rncm5g59j220k0l4q7u.jpg" alt="image-20220531160325932" loading="lazy"></figure>
<p>勾选一下创建快捷方式，然后继续点Next等待安装就行了：</p>
<figure data-type="image" tabindex="18"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rnd7qj7mj22080l67b2.jpg" alt="image-20220531160400589" loading="lazy"></figure>
<p>安装完成后，我们可以直接打开：</p>
<figure data-type="image" tabindex="19"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rnjvf3k1j227w0r079b.jpg" alt="image-20220531161024539" loading="lazy"></figure>
<p>这里会提示我们激活，点击按钮去官网注册一个账号。注册完成后，推荐去申请一下学生授权，因为试用只有30天：<a href="https://zhuanlan.zhihu.com/p/378185042">Jetbrains学生授权获取指南 - 知乎 (zhihu.com)</a></p>
<figure data-type="image" tabindex="20"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rnltppqfj22c40segr3.jpg" alt="image-20220531161215214" loading="lazy"></figure>
<p>这里我们点击开始试用，然后就可以点击Continue了，现在成功来到主界面：</p>
<figure data-type="image" tabindex="21"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rnnis1prj22020u00xg.jpg" alt="image-20220531161354913" loading="lazy"></figure>
<p>由于是英文，使用不太方便，所以我们安装一下中文插件：</p>
<figure data-type="image" tabindex="22"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rnom1mcvj223k0u0k1k.jpg" alt="image-20220531161457379" loading="lazy"></figure>
<p>现在我们就成功安装好CLion集成开发环境了。</p>
<figure data-type="image" tabindex="23"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rnpj7nshj222r0u0wjs.jpg" alt="image-20220531161549721" loading="lazy"></figure>
<p>现在我们来创建我们的第一个C语言项目（我们的程序是以一个项目的形式进行管理的，这里知道怎么创建就行了）：</p>
<figure data-type="image" tabindex="24"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rnqck8fyj22450u0tf6.jpg" alt="image-20220531161637209" loading="lazy"></figure>
<p>这里选择C可执行文件，然后项目的保存位置可以自行修改，配置完成后点击创建：</p>
<figure data-type="image" tabindex="25"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rnveombnj21kx0u00vt.jpg" alt="image-20220531162129788" loading="lazy"></figure>
<p>可以看到，在创建之后，会自动为我们生成一段示例代码，而之后我们要编写的代码，都在生成的main.c中进行编写，除了这个文件，其他的全部不要去修改，也不用管是什么意思，后面我们会慢慢介绍。</p>
<p>接着我们需要配置一下工具链，选择捆绑的MinGW（如果已经有了就不需要配置了）</p>
<figure data-type="image" tabindex="26"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2robghz53j21kq0u0tdo.jpg" alt="image-20220531163655149" loading="lazy"></figure>
<p>那么这段示例代码有了，我们如何编译运行呢？</p>
<figure data-type="image" tabindex="27"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2rnyucqxmj21kv0u00wb.jpg" alt="image-20220531162447514" loading="lazy"></figure>
<p>我们可以点击代码旁边的绿色三角形符号或是右上角的绿色三角形，就可以直接编译运行我们的代码了。运行的结果是在控制台输出一个“HelloWorld！”，当然我们也可以直接运行编译出来的可执行文件：</p>
<figure data-type="image" tabindex="28"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2ro0rgqnaj21u20e4di5.jpg" alt="image-20220531162638883" loading="lazy"></figure>
<p>我们可以看到，这里生成了一个<code>项目名称.exe</code>文件，这种就是Windows环境下可以直接运行的应用程序，我们可以打开这个文件夹，直接使用cmd来运行：</p>
<figure data-type="image" tabindex="29"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2ro2lc6rxj218404qt9n.jpg" alt="image-20220531162824734" loading="lazy"></figure>
<p>运行出来的效果是一样的，这种程序实际上就是最原始的命令行程序，输入和输出都是在这种黑框框中进行的，而我们的主要学习目标也是这种命令行程序。</p>
<p>这样我们就配置好了开发环境，然后就不要去动其他的东西了，一般新手最容易遇到一些奇奇怪怪的问题。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://dengbowang.github.io/post/hello-gridea/</id>
        <link href="https://dengbowang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>